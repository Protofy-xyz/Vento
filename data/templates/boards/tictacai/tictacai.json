{
    "name": "{{{name}}}",
    "icon": "grid-3x3",
    "cards": [
        {
            "key": "action_1754155173070",
            "width": 4,
            "height": 12,
            "icon": "grid-3x3",
            "name": "game",
            "description": "# Game\r\n\r\nGame board, 3x3 matrix with the current game state.\r\n\r\n# Matrix / Grid\r\n\r\nCreates and manipulates bi-dimensional grids. The grid is stored as a bidimensional\r\narray where the first level is the row, and second level is the column.\r\n\r\n## Accessing a specific position given row and column\r\n\r\n```js\r\nmatrix[row][column]\r\n```\r\n\r\n## Actions\r\n\r\n### `reset`\r\n\r\nCreates a new matrix with the given dimensions and initializes all cells with a value.\r\n\r\n**Parameters:**\r\n\r\n* `action`: `\"reset\"`\r\n* `width`: number of columns (must be a positive integer)\r\n* `height`: number of rows (must be a positive integer)\r\n* `value`: initial value for all cells\r\n\r\n**Example:**\r\n\r\n```json\r\n{\r\n  \"action\": \"reset\",\r\n  \"width\": 3,\r\n  \"height\": 3,\r\n  \"value\": \"\"\r\n}\r\n```\r\n\r\n**Effect:**\r\nResets the matrix to a 3Ã—3 grid with all cells initialized to an empty string (`\"\"`).\r\n\r\n---\r\n\r\n### `setCell`\r\n\r\nSets a specific cell at position `(x, y)` to the given value.\r\nCoordinates are 0-based: `x` is the column index, `y` is the row index.\r\n\r\n**Parameters:**\r\n\r\n* `action`: `\"setCell\"`\r\n* `x`: column index\r\n* `y`: row index\r\n* `value`: value to set in the specified cell\r\n\r\n**Example:**\r\n\r\n```json\r\n{\r\n  \"action\": \"setCell\",\r\n  \"x\": 1,\r\n  \"y\": 2,\r\n  \"value\": \"X\"\r\n}\r\n```\r\n\r\n**Effect:**\r\nSets the value `\"X\"` in the cell located at column 1, row 2.",
            "type": "action",
            "editorOptions": {},
            "displayResponse": true,
            "params": {
                "x": "position  x only needed when using setCell",
                "y": "position y only needed when using setCell",
                "action": "reset or setCell",
                "value": "initialization value when using reset, value for cell when using setCell",
                "width": "width of the matrix: needed for reset",
                "height": "height of the matrix: needed for reset"
            },
            "defaultValue": [
                [
                    "",
                    "",
                    ""
                ],
                [
                    "",
                    "",
                    ""
                ],
                [
                    "",
                    "",
                    ""
                ]
            ],
            "configParams": {
                "x": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "number"
                },
                "y": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "number"
                },
                "action": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                },
                "value": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                },
                "width": {
                    "visible": true,
                    "defaultValue": "3",
                    "type": "number"
                },
                "height": {
                    "visible": true,
                    "defaultValue": "3",
                    "type": "number"
                }
            },
            "displayButton": true,
            "displayIcon": false,
            "rulesCode": "const matrix = board?.[name];\n\nif (params.action === 'reset') {\n  const width = params.width;\n  const height = params.height;\n  const initialValue = params.value;\n\n  if (!Number.isInteger(width) || width <= 0 ||\n      !Number.isInteger(height) || height <= 0) {\n    throw new TypeError('matrix reset error: width and height should positive numbers');\n  }\n\n  // Nueva matriz de height x width\n  return Array.from({ length: height }, () =>\n    Array.from({ length: width }, () => initialValue)\n  );\n} else {\n  if (!Array.isArray(matrix)) {\n    throw new Error('matrix set error: cannot set a value in an empty matrix');\n  }\n\n  const posX = params.x;\n  const posY = params.y;\n  const val = params.value;\n\n  if (!Number.isInteger(posY) || posY < 0 || posY >= matrix.length) {\n    throw new RangeError(`matrix set error: y out of range: ${posY}`);\n  }\n  const row = matrix[posY];\n  if (!Array.isArray(row)) {\n    throw new TypeError(`matrix set error: invalud row`);\n  }\n  if (!Number.isInteger(posX) || posX < 0 || posX >= row.length) {\n    throw new RangeError(`matrix set error x out of range: ${posX}`);\n  }\n\n  // Copia inmutable y set\n  const next = matrix.map(r => r.slice());\n  next[posY][posX] = val;\n  return next;\n}",
            "html": "//@card/react\n\nfunction MatrixTable({ data }) {\n  const rows = Array.isArray(data) ? data : []\n  const maxCols = rows.reduce((m, r) => Math.max(m, Array.isArray(r) ? r.length : 0), 0)\n\n  const wrapStyle = {\n    width: '100%',\n    height: '100%',\n    overflow: 'auto',\n  }\n  const tableStyle = {\n    borderCollapse: 'collapse',\n    width: '100%',\n    height: '100%',\n  }\n  const cellStyle = {\n    border: '1px solid #ccc',\n    padding: '6px 8px',\n    textAlign: 'center',\n  }\n\n  return (\n    <div style={wrapStyle}>\n      <table style={tableStyle}>\n        <tbody>\n          {rows.map((row, rIdx) => (\n            <tr key={rIdx}>\n              {Array.from({ length: maxCols }).map((_, cIdx) => {\n                const v = Array.isArray(row) ? row[cIdx] : undefined\n                const text = v == null ? '' : String(v)\n                return <td key={cIdx} style={cellStyle}><CardValue value={text ?? \"\"} /></td>\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nfunction Widget(card) {\n  const value = card.value;\n  const isMatrix = Array.isArray(value) && value.every(r => Array.isArray(r));\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = (\n    <YStack f={1} h=\"100%\" miH={0} mt={fullHeight ? \"20px\" : \"0px\"} ai=\"stretch\" jc=\"flex-start\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n        <Icon name={card.icon} size={48} color={card.color} />\n      )}\n\n      {card.displayResponse !== false && (\n        isMatrix ? (\n          <YStack f={1} miH={0} width=\"100%\">\n            <MatrixTable data={value} />\n          </YStack>\n        ) : (\n          <YStack f={1} miH={0} width=\"100%\"><h1>{value !== undefined ? String(value) : 'Empty table'}</h1></YStack>\n        )\n      )}\n    </YStack>\n  );\n\n  return (\n    <Tinted>\n      <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n        <ActionCard data={card} style={{ height: '100%'}}>\n          {content}\n        </ActionCard>\n      </ProtoThemeProvider>\n    </Tinted>\n  );\n}"
        },
        {
            "key": "action_1754171812711",
            "width": 2,
            "height": 6,
            "icon": "eraser",
            "type": "action",
            "name": "new game",
            "displayResponse": false,
            "buttonLabel": "New game",
            "displayIcon": false,
            "displayTitle": true,
            "displayFrame": true,
            "displayButtonIcon": false,
            "description": "Inicia un nuevo juego, ejecuta esta accion para empezar un nuevo juego.",
            "rules": [
                "reseta el valor de game y pon un valor de '-' en una matriz de 3x3",
                "reset Player A y Player B"
            ],
            "rulesCode": "// This JavaScript implementation initializes a new Tic-Tac-Toe game by resetting the game board to a 3x3 grid, all cells initialized to '-'. \n// It also resets the player states associated with Player A and Player B, starting a fresh game session.\n\n// Reset the game board to a 3x3 grid with all cells initialized to '-'\nawait execute_action(\"game\", {\n    action: \"reset\",\n    value: \"-\",\n    width: 3,\n    height: 3\n});\n\n// Reset the states for Player A and Player B\nawait execute_action(\"/api/core/v1/board/cardreset\", { name: \"Player A\" });\nawait execute_action(\"/api/core/v1/board/cardreset\", { name: \"Player B\" });\n\n// Optionally reset the turn to the initial state, if needed\n// await execute_action(\"turn\", { action: 'reset' });",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "action_1754172148122",
            "width": 2,
            "height": 6,
            "icon": "zap",
            "type": "action",
            "name": "move",
            "displayResponse": true,
            "params": {
                "row": "row to choose",
                "col": "column to choose"
            },
            "configParams": {
                "row": {
                    "visible": true,
                    "defaultValue": "0",
                    "type": "number"
                },
                "col": {
                    "visible": true,
                    "defaultValue": "0",
                    "type": "number"
                }
            },
            "displayIcon": false,
            "description": "Use this action to make a move in the board. \r\nPass the row and column choosen, and your piece will be placed there.",
            "rulesCode": "\nif(board['game'][params.row][params.col] == '-') {\n    await execute_action(\"game\", {\n        x: params.col, // position  x only needed when using setCell\n        y: params.row, // position y only needed when using setCell\n        action: 'setCell', // reset or setCell\n        value: board['turn'] == 'A' ? 'x' : 'o', // initialization value when using reset, value for cell when using setCell\n    })\n    return params.col + ' ' + params.row\n}\n\nreturn 'invalid'\n",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "action_1754172968283",
            "width": 3,
            "height": 12,
            "icon": "sparkles",
            "type": "action",
            "name": "Player A",
            "displayResponse": true,
            "params": {
                "prompt": ""
            },
            "configParams": {
                "prompt": {
                    "visible": false,
                    "defaultValue": "",
                    "type": "text"
                }
            },
            "displayIcon": false,
            "displayButton": true,
            "displayButtonIcon": true,
            "buttonLabel": "Move Player A",
            "description": "Player A: usa esta accion para que mueva el player A",
            "rulesCode": "const preprompt = `\n<instructions>You are integrated into a board system.\nThe board is composed of states and actions.\nYou will receive a user message and your mission is to generate a json response.\nOnly respond with a JSON in the following format:\n\n{\n    \"response\": \"whatever you want to say\",\n    \"actions\": [\n        {\n            \"name\": \"action_1\",\n            \"params\": {\n                \"example_param\": \"example_value\"\n            } \n        }\n    ]\n}\n\nThe key response will be shown to the user as a response to the user prompt.\nThe actions array can be empty if the user prompt requires no actions to be executed.\nWhen executing an action, always use the action name. Never use the action id to execute actions, just the name. \n\n</instructions>\n<board_actions>\n${JSON.stringify(boardActions)}\n</board_action>\n<board_states>\n${JSON.stringify(board)}\n</board_states>\n\nThe user prompt is:\n\n${board['prompt']}\n`\n\nconst images = Object.keys(board).filter(k => board[k] && board[k].type && board[k].type == 'frame').map(k => board[k].frame)\nconst response = await execute_action(\"/api/v1/chatgpt/send/prompt\", { message: preprompt, images});\nconst cleanResponse = response.trim().replace(/```json\\s*/i, '').replace(/\\s*```$/, '');\n\ntry {\n    const parsedResponse = JSON.parse(cleanResponse)\n    parsedResponse.actions.forEach((action) => {\n        execute_action(action.name, action.params)\n    })\n    return parsedResponse.response\n} catch(e) {\n\n}\n\n",
            "html": "\n// data contains: data.icon, data.color, data.name, data.params\nreactCard(`\n  function Widget(props) {\n    const value = props.value;\n    const fullHeight = true\n\n    const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n        {props.icon && props.displayIcon !== false && (\n            <Icon name={props.icon} size={48} color={props.color}/>\n        )}\n        {props.displayResponse !== false && (\n            <CardValue mode=\"markdown\" value={value ?? \"Player A ready\"} />\n        )}\n    </YStack>\n\n    return (\n        <Tinted>\n          <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <ActionCard data={props}>\n              {props.displayButton !== false ? <ParamsForm data={props}>{content}</ParamsForm> : props.displayResponse !== false && content}\n            </ActionCard>\n          </ProtoThemeProvider>\n        </Tinted>\n    );\n  }\n`, data.domId, data)\n\n"
        },
        {
            "key": "value_1754173318440",
            "width": 3,
            "height": 12,
            "icon": "file-text",
            "name": "prompt",
            "description": "Render formatted markdown using ReactMarkdown",
            "type": "value",
            "editorOptions": {},
            "rulesCode": "return `- EstÃ¡s jugando al 3 en raya.\n- Eres el jugador **A**\n- Tus fichas se ven en tablero como 'x'.\n- Estas jugando contra el jugador **B**. \n- Las fichas de tu contrincante son 'o'.\n- Es tu turno, mueve. Intenta ganar. \n- Explica que movimientos has hecho\ny por que has hecho ese movimiento.\n- Observa bien donde estan las fichas o para evitar que formen linea\n`",
            "html": "//@react\nreturn markdown(data)"
        },
        {
            "key": "action_1754172968283_vento_copy_ktk7zy2f3rtp2xvkd8p7d",
            "width": 3,
            "height": 12,
            "icon": "sparkles",
            "type": "action",
            "name": "Player B",
            "displayResponse": true,
            "params": {
                "prompt": ""
            },
            "configParams": {
                "prompt": {
                    "visible": false,
                    "defaultValue": "",
                    "type": "text"
                }
            },
            "displayIcon": false,
            "displayButton": true,
            "displayButtonIcon": true,
            "buttonLabel": "Move Player B",
            "description": "Player B: usa esta accion para que mueva el player B",
            "rulesCode": "const preprompt = `\n<instructions>You are integrated into a board system.\nThe board is composed of states and actions.\nYou will receive a user message and your mission is to generate a json response.\nOnly respond with a JSON in the following format:\n\n{\n    \"response\": \"whatever you want to say\",\n    \"actions\": [\n        {\n            \"name\": \"action_1\",\n            \"params\": {\n                \"example_param\": \"example_value\"\n            } \n        }\n    ]\n}\n\nThe key response will be shown to the user as a response to the user prompt.\nThe actions array can be empty if the user prompt requires no actions to be executed.\nWhen executing an action, always use the action name. Never use the action id to execute actions, just the name. \n\n</instructions>\n<board_actions>\n${JSON.stringify(boardActions)}\n</board_action>\n<board_states>\n${JSON.stringify(board)}\n</board_states>\n\nThe user prompt is:\n\n${board?.['prompt _2']}\n`\n\nconst images = Object.keys(board).filter(k => board[k] && board[k].type && board[k].type == 'frame').map(k => board[k].frame)\nconst response = await execute_action(\"/api/v1/chatgpt/send/prompt\", { message: preprompt, images});\nconst cleanResponse = response.trim().replace(/```json\\s*/i, '').replace(/\\s*```$/, '');\n\ntry {\n    const parsedResponse = JSON.parse(cleanResponse)\n    parsedResponse.actions.forEach((action) => {\n        execute_action(action.name, action.params)\n    })\n    return parsedResponse.response\n} catch(e) {\n\n}\n\n",
            "html": "\n// data contains: data.icon, data.color, data.name, data.params\nreactCard(`\n  function Widget(props) {\n    const value = props.value;\n    const fullHeight = true\n\n    const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n        {props.icon && props.displayIcon !== false && (\n            <Icon name={props.icon} size={48} color={props.color}/>\n        )}\n        {props.displayResponse !== false && (\n            <CardValue mode=\"markdown\" value={value ?? \"Player B Ready\"} />\n        )}\n    </YStack>\n\n    return (\n        <Tinted>\n          <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <ActionCard data={props}>\n              {props.displayButton !== false ? <ParamsForm data={props}>{content}</ParamsForm> : props.displayResponse !== false && content}\n            </ActionCard>\n          </ProtoThemeProvider>\n        </Tinted>\n    );\n  }\n`, data.domId, data)\n\n"
        },
        {
            "key": "value_1754173318440_vento_copy_cfjioizbuxpabdx5ushy",
            "width": 3,
            "height": 12,
            "icon": "file-text",
            "name": "prompt _2",
            "description": "Render formatted markdown using ReactMarkdown",
            "type": "value",
            "editorOptions": {},
            "rulesCode": "return `- EstÃ¡s jugando al 3 en raya.\n- Eres el jugador **B**\n- Tus fichas se ven en tablero como 'o'.\n- Estas jugando contra el jugador **A**. \n- Las fichas de tu contrincante son 'x'.\n- Es tu turno, mueve. Intenta ganar. \n- Explica que movimientos has hecho\ny por que has hecho ese movimiento.\n- Observa bien donde estan las fichas x para evitar que formen linea\n`",
            "html": "//@react\nreturn markdown(data)"
        },
        {
            "key": "action_1754226848105",
            "width": 2,
            "height": 12,
            "icon": "file-stack",
            "name": "stats",
            "description": "Interactive object",
            "type": "action",
            "editorOptions": {},
            "displayResponse": true,
            "params": {
                "key": "key",
                "value": "value"
            },
            "configParams": {
                "key": {
                    "visible": true,
                    "defaultValue": ""
                },
                "value": {
                    "visible": true,
                    "defaultValue": ""
                }
            },
            "displayButton": false,
            "rulesCode": "if (params.action === 'reset' || params.action === 'clear') {\n  return {};\n} else if (params.action === 'delete') {\n  const newObj = { ...(board?.[name] ?? {}) }\n  delete newObj[params.key]\n  return newObj\n} else if (params.action === 'rename') {\n  const oldKey = params.oldKey\n  const newKey = params.newKey\n  const obj = { ...(board?.[name] ?? {}) }\n  if (oldKey !== newKey && obj[oldKey] !== undefined && obj[newKey] === undefined) {\n    obj[newKey] = obj[oldKey]\n    delete obj[oldKey]\n  }\n  return obj\n} else {\n  const key = params.key\n  const value = params.value\n  return { ...(board?.[name] ?? {}), [key]: value }\n}",
            "html": "reactCard(`\n  function Widget(props) {\n    console.log('react object widget: ', props.value)\n    return (\n      <Tinted>\n        <ViewObject\n          object={props.value}\n          onAdd={(key, value) => execute_action('${data.name}', { action: 'set', key, value })}\n          onValueEdit={(key, value) => execute_action('${data.name}', { action: 'set', key, value })}\n          onKeyDelete={(key) => execute_action('${data.name}', { action: 'delete', key })}\n          onKeyEdit={(oldKey, newKey) => execute_action('${data.name}', { action: 'rename', oldKey, newKey })}\n          onClear={() => execute_action('${data.name}', { action: 'reset' })}\n        />\n      </Tinted>\n    );\n  }\n`, data.domId, data)"
        },
        {
            "key": "action_1754226953383",
            "width": 2,
            "height": 6,
            "icon": "zap",
            "type": "action",
            "name": "reset stats",
            "displayResponse": false,
            "displayIcon": false,
            "displayTitle": true,
            "buttonLabel": "reset stats",
            "rulesCode": "await execute_action(\"stats\", {\n    \"action\": \"clear\"\n})\n\nawait execute_action(\"stats\", {\n\tkey: 'Player A', // key\n\tvalue: 0, // value\n\taction: 'set'\n})\n\nawait execute_action(\"stats\", {\n\tkey: 'Player B', // key\n\tvalue: 0, // value\n\taction: 'set'\n})\n\nawait execute_action(\"stats\", {\n\tkey: 'Draw', // key\n\tvalue: 0, // value\n\taction: 'set'\n})",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "value_1754238566839",
            "width": 2.5,
            "height": 10,
            "icon": "chart-pie",
            "name": "Ratio",
            "description": "## Pie Chart\r\n\r\nDisplays a pie chart using Recharts.\r\n\r\nThe data should be an array of objects with the properties name and value. The name is the name for the element in the chart, and the value is the numerical value for this elements in the chart.",
            "type": "value",
            "params": {
                "nameKey": "name",
                "dataKey": "value"
            },
            "rules": [
                "lee los stats de board.stats y ponlos en el grafico"
            ],
            "rulesCode": "// El cÃ³digo genera un array de objetos para el grÃ¡fico de pastel, transformando las estadÃ­sticas de \"board.stats\" en el formato requerido.\nreturn Object.entries(board?.stats).map(([name, value]) => ({ name, value: parseFloat(value) }));",
            "html": "\n\nreactCard(`\n  function Widget(props) {\n    const aspect = useCardAspectRatio('${data.domId}')\n    return (\n          <View className=\"no-drag\">\n            <PieChart\n              colors={chartColors}\n              title={\"players score\"}\n              id={\"piechart\"}\n              data={props.value}\n              dataKey={props.params.dataKey}\n              nameKey={props.params.nameKey}\n              isAnimationActive={false}\n              aspect={aspect}\n            />\n          </View>\n    );\n  }\n\n`, data.domId, data)\n\n\n\n            "
        },
        {
            "key": "action_1754226953383_vento_copy_3hd8dew5tr9uteg63ec17",
            "width": 2,
            "height": 6,
            "icon": "zap",
            "type": "action",
            "name": "Player A win",
            "displayResponse": false,
            "displayIcon": false,
            "displayTitle": true,
            "buttonLabel": "Player A win",
            "rules": [
                "agrega 1 al numero de victorias de A en los stats",
                "si stats no existe o es un objeto vacio, ejecuta 'reset stats'",
                "el valor de retorno final es null, solo son importantes los dos execute_action"
            ],
            "rulesCode": "// This code ensures the 'stats' object is properly initialized and updates the number of victories for Player A. \n// If the 'stats' object does not exist or is empty, it resets it. \n// Then, it increments Player A's victory count by 1.\n\nif (!board.stats || Object.keys(board.stats).length === 0) {\n    await execute_action(\"reset stats\");\n}\n\nawait execute_action(\"stats\", {\n    key: \"Player A\",\n    value: parseInt(board.stats[\"Player A\"] || 0) + 1\n});\n\nreturn null;",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "action_1754226953383_vento_copy_9vujarutkmsohoasqopfsf",
            "width": 2,
            "height": 6,
            "icon": "zap",
            "type": "action",
            "name": "Player B win",
            "displayResponse": false,
            "displayIcon": false,
            "displayTitle": true,
            "buttonLabel": "Player B win",
            "rules": [
                "agrega 1 al numero de victorias de B en los stats",
                "si stats no existe o es un objeto vacio, ejecuta 'reset stats'",
                "el valor de retorno final es null, solo son importantes los dos execute_action"
            ],
            "rulesCode": "// This code first checks if the 'stats' object exists and is not empty. If the 'stats' object is missing or empty, it executes the 'reset stats' action to initialize it. \n// After confirming the stats are properly initialized, it increments the victory count for Player B by 1 using the 'stats' action. \n// According to the rules, the final return value is null.\n\nif (!board.stats || Object.keys(board.stats).length === 0) {\n    return execute_action(\"reset stats\");\n}\n\nreturn execute_action(\"stats\", {\n    key: \"Player B\",\n    value: Number(board.stats[\"Player B\"] || 0) + 1\n});\n\nreturn null;",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "value_1754252721218",
            "width": 1,
            "height": 4,
            "icon": "tag",
            "type": "value",
            "name": "remaining_moves",
            "rules": [
                "devuelve el numero de casillas vacias que quedan en el board"
            ],
            "description": "Cuantos movimientos quedan disponibles, si llega a 0 no quedan movimientos",
            "rulesCode": "// El cÃ³digo cuenta el nÃºmero de casillas vacÃ­as que quedan en el \"board\" al sumar los sÃ­mbolos '-' en la matriz de juego.\nreturn board?.['game'].flat().filter(cell => cell === '-').length;",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <YStack f={1} height=\"100%\" ai=\"center\" jc=\"center\" width=\"100%\">\n                {card.icon && card.displayIcon !== false && (\n                    <Icon name={card.icon} size={48} color={card.color}/>\n                )}\n                {card.displayResponse !== false && (\n                    <CardValue value={value ?? \"N/A\"} />\n                )}\n            </YStack>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "value_1754253692596",
            "width": 1,
            "height": 4,
            "icon": "tag",
            "type": "value",
            "name": "turn",
            "rules": [
                "si el numero de movimientos que quedan disponibles es impar, es el turno de A, si es par, es el turno de B. si es 0, es el turno '-'. devuelve el turno."
            ],
            "displayIcon": false,
            "rulesCode": "// Este cÃ³digo determina de quiÃ©n es el turno basÃ¡ndose en el nÃºmero de movimientos restantes en el tablero de juego.\n// Si el nÃºmero de movimientos restantes es impar, es el turno de A; si es par, es el turno de B. Si no hay movimientos restantes, devuelve '-'.\nreturn board?.['remaining_moves'] === 0 ? '-' : board?.['remaining_moves'] % 2 !== 0 ? 'A' : 'B';",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <YStack f={1} height=\"100%\" ai=\"center\" jc=\"center\" width=\"100%\">\n                {card.icon && card.displayIcon !== false && (\n                    <Icon name={card.icon} size={48} color={card.color}/>\n                )}\n                {card.displayResponse !== false && (\n                    <CardValue value={value ?? \"N/A\"} />\n                )}\n            </YStack>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "action_1754226953383_vento_copy_zao7ws687fgli9siu4b2m",
            "width": 2,
            "height": 6,
            "icon": "zap",
            "type": "action",
            "name": "Draw",
            "displayResponse": false,
            "displayIcon": false,
            "displayTitle": true,
            "buttonLabel": "Player A win",
            "rules": [
                "agrega 1 al numero de empates en los stats",
                "si stats no existe o es un objeto vacio, ejecuta 'reset stats'",
                "el valor de retorno final es null, solo son importantes los dos execute_action",
                "el valor en los stats para los empates es 'Draw'"
            ],
            "rulesCode": "// This code checks if the stats object exists and is not empty; if it is empty, it executes the 'reset stats' action. \n// Then, it adds 1 to the number of draws in the stats object, under the key 'Draw'. Both actions are meant to keep track of and update game statistics.\n\nif (!board.stats || Object.keys(board.stats).length === 0) {\n    await execute_action(\"reset stats\");\n}\nawait execute_action(\"stats\", {key: \"Draw\", value: \"1\"});\nreturn null;",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  const fullHeight = value !== undefined && typeof value !== \"string\" && typeof value !== \"number\" && typeof value !== \"boolean\";\n\n  const content = <YStack f={fullHeight ? 1 : undefined}  mt={fullHeight ? \"20px\" : \"0px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "value_1754256344524",
            "width": 3,
            "height": 10,
            "icon": "pencil",
            "name": "sketch",
            "freeze": true,
            "description": "Draw something",
            "type": "value",
            "displayTitle": false,
            "drawing": "{\"lines\":[],\"width\":400,\"height\":400}",
            "rulesCode": "",
            "html": "//reactCard\nreturn sketch(data)"
        }
    ],
    "autopilot": false,
    "layouts": {
        "lg": [
            {
                "w": 18,
                "h": 14,
                "x": 15,
                "y": 0,
                "i": "action_1754155173070",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 9,
                "h": 4,
                "x": 24,
                "y": 14,
                "i": "action_1754171812711",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 9,
                "h": 10,
                "x": 15,
                "y": 18,
                "i": "action_1754172148122",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 18,
                "x": 0,
                "y": 0,
                "i": "action_1754172968283",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 10,
                "x": 0,
                "y": 18,
                "i": "value_1754173318440",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 18,
                "x": 33,
                "y": 0,
                "i": "action_1754172968283_vento_copy_ktk7zy2f3rtp2xvkd8p7d",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 10,
                "x": 33,
                "y": 18,
                "i": "value_1754173318440_vento_copy_cfjioizbuxpabdx5ushy",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 17,
                "h": 16,
                "x": 48,
                "y": 0,
                "i": "action_1754226848105",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 4,
                "x": 65,
                "y": 0,
                "i": "action_1754226953383",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 25,
                "h": 12,
                "x": 48,
                "y": 16,
                "i": "value_1754238566839",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 4,
                "x": 65,
                "y": 12,
                "i": "action_1754226953383_vento_copy_3hd8dew5tr9uteg63ec17",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 4,
                "x": 65,
                "y": 8,
                "i": "action_1754226953383_vento_copy_9vujarutkmsohoasqopfsf",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 9,
                "h": 5,
                "x": 24,
                "y": 18,
                "i": "value_1754252721218",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 9,
                "h": 4,
                "x": 15,
                "y": 14,
                "i": "value_1754253692596",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 4,
                "x": 65,
                "y": 4,
                "i": "action_1754226953383_vento_copy_zao7ws687fgli9siu4b2m",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 9,
                "h": 5,
                "x": 24,
                "y": 23,
                "i": "value_1754256344524",
                "moved": false,
                "static": false,
                "isResizable": true
            }
        ],
        "md": [
            {
                "i": "action_1754155173070",
                "x": 0,
                "y": 7,
                "w": 30,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754171812711",
                "x": 30,
                "y": 20,
                "w": 15,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754172148122",
                "x": 45,
                "y": 26,
                "w": 15,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754172968283",
                "x": 0,
                "y": 53,
                "w": 23,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1754173318440",
                "x": 23,
                "y": 66,
                "w": 23,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754172968283_vento_copy_ktk7zy2f3rtp2xvkd8p7d",
                "x": 0,
                "y": 86,
                "w": 23,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1754173318440_vento_copy_cfjioizbuxpabdx5ushy",
                "x": 23,
                "y": 99,
                "w": 23,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754226848105",
                "x": 46,
                "y": 112,
                "w": 15,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754226953383",
                "x": 0,
                "y": 126,
                "w": 15,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754238566839",
                "x": 15,
                "y": 132,
                "w": 19,
                "h": 11,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_3hd8dew5tr9uteg63ec17",
                "x": 34,
                "y": 142,
                "w": 15,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_9vujarutkmsohoasqopfsf",
                "x": 49,
                "y": 148,
                "w": 15,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754252721218",
                "x": 0,
                "y": 155,
                "w": 8,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "value_1754253692596",
                "x": 8,
                "y": 159,
                "w": 8,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_zao7ws687fgli9siu4b2m",
                "x": 16,
                "y": 163,
                "w": 15,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754256344524",
                "x": 31,
                "y": 169,
                "w": 23,
                "h": 11,
                "isResizable": true
            }
        ],
        "sm": [
            {
                "i": "action_1754155173070",
                "x": 0,
                "y": 19,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754171812711",
                "x": 0,
                "y": 33,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754172148122",
                "x": 1,
                "y": 39,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754172968283",
                "x": 0,
                "y": 67,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1754173318440",
                "x": 0,
                "y": 81,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754172968283_vento_copy_ktk7zy2f3rtp2xvkd8p7d",
                "x": 0,
                "y": 102,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1754173318440_vento_copy_cfjioizbuxpabdx5ushy",
                "x": 0,
                "y": 116,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754226848105",
                "x": 0,
                "y": 130,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754226953383",
                "x": 1,
                "y": 143,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754238566839",
                "x": 0,
                "y": 150,
                "w": 2,
                "h": 11,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_3hd8dew5tr9uteg63ec17",
                "x": 0,
                "y": 161,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_9vujarutkmsohoasqopfsf",
                "x": 1,
                "y": 167,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754252721218",
                "x": 0,
                "y": 174,
                "w": 1,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "value_1754253692596",
                "x": 1,
                "y": 178,
                "w": 1,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_zao7ws687fgli9siu4b2m",
                "x": 0,
                "y": 183,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754256344524",
                "x": 0,
                "y": 190,
                "w": 2,
                "h": 11,
                "isResizable": true
            }
        ],
        "xs": [
            {
                "i": "action_1754155173070",
                "x": 0,
                "y": 21,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754171812711",
                "x": 0,
                "y": 35,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754172148122",
                "x": 0,
                "y": 42,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754172968283",
                "x": 0,
                "y": 70,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1754173318440",
                "x": 0,
                "y": 84,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754172968283_vento_copy_ktk7zy2f3rtp2xvkd8p7d",
                "x": 0,
                "y": 105,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1754173318440_vento_copy_cfjioizbuxpabdx5ushy",
                "x": 0,
                "y": 119,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754226848105",
                "x": 0,
                "y": 133,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_1754226953383",
                "x": 0,
                "y": 147,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754238566839",
                "x": 0,
                "y": 154,
                "w": 1,
                "h": 11,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_3hd8dew5tr9uteg63ec17",
                "x": 0,
                "y": 165,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_9vujarutkmsohoasqopfsf",
                "x": 0,
                "y": 172,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754252721218",
                "x": 0,
                "y": 179,
                "w": 1,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "value_1754253692596",
                "x": 0,
                "y": 184,
                "w": 1,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "action_1754226953383_vento_copy_zao7ws687fgli9siu4b2m",
                "x": 0,
                "y": 189,
                "w": 1,
                "h": 7,
                "isResizable": true
            },
            {
                "i": "value_1754256344524",
                "x": 0,
                "y": 196,
                "w": 1,
                "h": 11,
                "isResizable": true
            }
        ],
        "": [
            {
                "w": 30,
                "h": 14,
                "x": 0,
                "y": 0,
                "i": "action_1754155173070",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 7,
                "x": 30,
                "y": 0,
                "i": "action_1754171812711",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 7,
                "x": 45,
                "y": 0,
                "i": "action_1754172148122",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 14,
                "x": 0,
                "y": 14,
                "i": "action_1754172968283",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 14,
                "x": 23,
                "y": 14,
                "i": "value_1754173318440",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 14,
                "x": 0,
                "y": 28,
                "i": "action_1754172968283_vento_copy_ktk7zy2f3rtp2xvkd8p7d",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 14,
                "x": 23,
                "y": 28,
                "i": "value_1754173318440_vento_copy_cfjioizbuxpabdx5ushy",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 14,
                "x": 46,
                "y": 7,
                "i": "action_1754226848105",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 7,
                "x": 0,
                "y": 42,
                "i": "action_1754226953383",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 19,
                "h": 11,
                "x": 15,
                "y": 42,
                "i": "value_1754238566839",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 7,
                "x": 34,
                "y": 42,
                "i": "action_1754226953383_vento_copy_3hd8dew5tr9uteg63ec17",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 7,
                "x": 49,
                "y": 21,
                "i": "action_1754226953383_vento_copy_9vujarutkmsohoasqopfsf",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 5,
                "x": 0,
                "y": 49,
                "i": "value_1754252721218",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 8,
                "h": 5,
                "x": 8,
                "y": 53,
                "i": "value_1754253692596",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 7,
                "x": 16,
                "y": 53,
                "i": "action_1754226953383_vento_copy_zao7ws687fgli9siu4b2m",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 11,
                "x": 31,
                "y": 53,
                "i": "value_1754256344524",
                "moved": false,
                "static": false,
                "isResizable": true
            }
        ]
    },
    "settings": {
        "showBoardUIOnPlay": false
    },
    "rules": [
        "vigila los cambios sobre turn, y cuando turn sea A, haz que el jugador A mueva, cuando turn sea B, haz que el jugador B mueva, a no ser que el tablero estÃ© completo. si el tablero estÃ¡ completo, no hagas nada.",
        "inicia un nuevo juego al arrancar",
        "en cada movimiento, mira quien ha ganado y dale la victoria al jugador que toca",
        "para decidir quien ha ganado, necesitas buscar si hay lineas horizontales o verticales o diagonales de 3 de tipo 'x' o 'o'. Si hay linea de x, ha ganado el jugador A. Si hay linea de 'o', ha ganado el jugador B. Si no hay lineas, entonces no ha ganado nadie, han empatado entonces pulsa Draw."
    ]
}