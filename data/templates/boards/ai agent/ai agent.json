{
    "name": "{{{name}}}",
    "cards": [
        {
            "key": "action_1760800582118",
            "width": 4,
            "height": 20,
            "icon": "globe",
            "name": "agent_input",
            "description": "A job queue with a list of pending jobs and a current job",
            "type": "action",
            "editorOptions": {},
            "displayResponse": true,
            "params": {
                "item": "",
                "action": "action to perform in the queue: push, pop, clear",
                "response": ""
            },
            "configParams": {
                "item": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                },
                "action": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                },
                "response": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                }
            },
            "presets": {
                "reply": {
                    "description": "Sends a reply to the current job and makes the next item (if any) the current job. The reply should be specified in the response param",
                    "configParams": {
                        "action": {
                            "visible": false,
                            "defaultValue": "reply"
                        },
                        "item": {
                            "visible": false
                        },
                        "response": {
                            "visible": true
                        }
                    }
                },
                "skip": {
                    "description": "Skips the current job. Do not use unless you know what you are doing.",
                    "configParams": {
                        "action": {
                            "defaultValue": "skip"
                        }
                    }
                },
                "reset": {
                    "description": "resets the queue state to empty and skip curret job",
                    "configParams": {
                        "action": {
                            "defaultValue": "clear"
                        }
                    }
                },
                "remove": {
                    "description": "remove the element with the given index from the job queue",
                    "configParams": {
                        "action": {
                            "defaultValue": "remove"
                        },
                        "item": {
                            "visible": true,
                            "defaultValue": 0,
                            "type": "number"
                        }
                    }
                },
                "push": {
                    "params": {
                        "item": "item to push"
                    },
                    "description": "Adds a new job",
                    "configParams": {
                        "action": {
                            "defaultValue": "push"
                        },
                        "item": {
                            "visible": true,
                            "defaultValue": "",
                            "type": "string"
                        }
                    }
                }
            },
            "enableAgentInputMode": true,
            "tokens": {},
            "displayButton": false,
            "manualAPIResponse": true,
            "rulesCode": "if (params.action == \"reset\") {\n  return { items: [], current: undefined };\n} else if (params.action == \"skip\") {\n  return {\n    items: (Array.isArray(board[name]?.items) ? board[name].items : []).slice(\n      1\n    ),\n    current: board[name].items[0],\n  };\n} else if (params.action == \"remove\") {\n  const queue = Array.isArray(board[name]?.items) ? board[name].items : [];\n  const index = parseInt(params.index, 10);\n  return {\n    items: queue.slice(0, index).concat(queue.slice(index + 1)),\n    current: board[name]?.current,\n  };\n} else if (params.action == \"clear\") {\n  return { items: [], current: board[name].current };\n} else if (params.action == \"reply\") {\n  //reply to current job\n  const job = board[name].current;\n  if (!job) {\n    throw \"Unable to send reply: There is not current job to reply to\";\n  }\n  const res = context.boards.getVar(\"job_\" + job.id, true);\n  if (!res) {\n    throw \"Unable to send reply: Empty res object in current job.\";\n  }\n  res.send(params.response);\n  return {\n    items: (Array.isArray(board[name]?.items) ? board[name].items : []).slice(\n      1\n    ),\n    current: board[name].items[0],\n  };\n} else {\n  const genUID = (l = 16) => {\n    const t = Date.now().toString(36);\n    const r =\n      Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2);\n    let out = \"\";\n    for (let i = 0; i < l; i++)\n      out += (i % 2 ? t : r)[i % (i % 2 ? t.length : r.length)];\n    return out;\n  };\n  const uid = genUID(16);\n  context.boards.setVar(\"job_\" + uid, res);\n  const item = {\n    id: uid,\n    time: new Date().toISOString(),\n    ua: req.get(\"User-Agent\"),\n    params: req.query,\n    path: params.path,\n  };\n\n  if (board[name]?.current) {\n    return {\n      items: (Array.isArray(board[name]?.items)\n        ? board[name].items\n        : []\n      ).concat([item]),\n      current: board[name]?.current,\n    };\n  }\n  return {\n    items: Array.isArray(board[name]?.items) ? board[name].items : [],\n    current: item,\n  };\n}\n",
            "html": "//@card/react\nfunction Widget(props) {\n  return (\n    <ViewList\n      onReply={(item, response) => execute_action(props.name, {action: 'reply', response: response})}\n      enableReply={true}\n      enableManualPop={true}\n      current={props?.value?.current}\n      emptyMessageProps={{\n        fontSize: \"$6\",\n        fontWeight: \"600\"\n      }}\n      emptyDescription={<YStack>\n        <Paragraph color=\"$color10\" mt={\"$2\"} fontSize={\"$4\"}>\n          <a style={{}} target=\"_new\" href={'/api/agents/v1/'+window?.board?.name+'/'+props?.name}>{'Open agent link'}</a>\n        </Paragraph>\n      </YStack>  \n      }\n      // emptyMode=\"wait\"\n      emptyMessage=\"Empty agent job queue\"\n      disableManualPush={true}\n      items={props?.value?.items} \n      onPop={(items) => execute_action(props.name, {action: 'skip'})}\n      onClear={(items) => execute_action(props.name, {action: 'reset'})}\n      onPush={(item) => execute_action(props.name, {action: 'push', item})}\n      onDeleteItem={(item, index) => execute_action(props.name, {action: 'remove', index})} \n    />\n  );\n}\n"
        },
        {
            "key": "action_1760815369680",
            "width": 3,
            "height": 12,
            "icon": "sparkles",
            "type": "action",
            "name": "agent_core",
            "displayResponse": true,
            "params": {
                "prompt": ""
            },
            "configParams": {
                "prompt": {
                    "visible": false,
                    "defaultValue": "board.prompt",
                    "type": "text"
                }
            },
            "description": "Execute actions and answer questions using AI.\n\n   #### Key Features\n  - Run actions based on AI.\n  - Chain/trigger other action cards.\n  - Parameterized execution.\n  - Customize parameters.\n  - Customize the card view (UI/render).",
            "displayIcon": false,
            "displayButton": true,
            "displayButtonIcon": true,
            "color": "var(--color7)",
            "theme": "light",
            "domId": "8eb4a538-e49f-4334-b2e5-a4af3ac87c65",
            "cardState": {},
            "links": [
                {
                    "name": "reply",
                    "type": "post"
                }
            ],
            "rulesCode": "let visibleStates = ['*']\nlet invisibleStates = [name, 'reply', 'agent_input']\n\n// Filtrar estados (board es un objeto)\nconst filteredStates = Object.fromEntries(\n  Object.entries(board).filter(([key, value]) => {\n    if (visibleStates.includes('*')) {\n      return !invisibleStates.includes(key)\n    }\n    return visibleStates.includes(key) && !invisibleStates.includes(key)\n  })\n)\n\nconst response = await context.chatgpt.prompt({\n  message: `\n<instructions>\nYou are an automated agent attending user requests. your mission is to read the user prompt and try to answer by using the by using the information you have.\n</instructions>\n<information>\n${JSON.stringify(filteredStates)}\n</information>\n\nThe user prompt is:\n\n${params.prompt}\n\nAnswer in plain text\n`,\n  conversation: await context.chatgpt.getSystemPrompt({\n    prompt: `You can analyze images provided in the same user turn. \nDo NOT claim you cannot see images.`,\n  }),\n  images: await context.boards.getStatesByType({\n    board: filteredStates,\n    type: \"frame\",\n    key: \"frame\",\n  }),\n  files: await context.boards.getStatesByType({\n    board: filteredStates,\n    type: \"file\",\n    key: \"path\",\n  }),\n});\n\nreturn response\n",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n\n  const content = <YStack f={1}  mt={\"20px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "action_176081905123123",
            "width": 2,
            "height": 7,
            "icon": "rocket",
            "type": "action",
            "name": "reply",
            "displayResponse": false,
            "displayIcon": false,
            "params": {
                "response": "response to send"
            },
            "configParams": {
                "response": {
                    "visible": false,
                    "defaultValue": "board.agent_core",
                    "type": "any"
                }
            },
            "description": "Actions can perform tasks, automate processes, and enhance user interactions. It can also trigger other action-type cards on the board.\n\n  #### Key Features\n  - Run actions from rules.\n  - Chain/trigger other action cards.\n  - Parameterized execution.\n  - Customize parameters.\n  - Customize the card view (UI/render).",
            "autoResponsive": false,
            "rulesCode": "await executeAction({name: \"agent_input\", params: {action:'reply', response: params.response}})\r\nreturn 'ok'",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n\n  const content = <YStack f={1}  mt={\"20px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "value_1760819815820",
            "width": 1,
            "height": 4,
            "icon": "scan-eye",
            "type": "value",
            "name": "user_request",
            "description": "A reusable card that observes value changes on the board.\n\n  #### Key Features\n  - Real time updates.\n  - Customize parameters.\n  - Rule execution on each value change.\n  - Customize the card view (UI/render).",
            "params": {
                "input": "input to observe"
            },
            "configParams": {
                "input": {
                    "visible": true,
                    "defaultValue": "board.agent_input.current",
                    "type": "any"
                }
            },
            "displayIcon": false,
            "rulesCode": "return params.input",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <YStack f={1} height=\"100%\" ai=\"center\" jc=\"center\" width=\"100%\">\n                {card.icon && card.displayIcon !== false && (\n                    <Icon name={card.icon} size={48} color={card.color}/>\n                )}\n                {card.displayResponse !== false && (\n                    <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n                )}\n            </YStack>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n\n"
        },
        {
            "key": "value_1760875866283",
            "width": 3,
            "height": 12,
            "icon": "file-text",
            "name": "prompt",
            "description": "Rules of the agent",
            "type": "value",
            "editorOptions": {},
            "params": {
                "prompt": ""
            },
            "configParams": {
                "prompt": {
                    "visible": true,
                    "defaultValue": "Vento is an agent platform\nYour mission is to generate a list of actions to perform in order to acomplish the user request.",
                    "type": "string"
                }
            },
            "rulesCode": "return params.prompt",
            "html": "//@react\nreturn markdown(data, true)"
        },
        {
            "key": "value_1760884383318",
            "width": 1,
            "height": 4,
            "icon": "scan-eye",
            "type": "value",
            "name": "about_vento",
            "description": "A reusable card that observes value changes on the board.\n\n  #### Key Features\n  - Real time updates.\n  - Customize parameters.\n  - Rule execution on each value change.\n  - Customize the card view (UI/render).",
            "params": {
                "input": "input to observe"
            },
            "configParams": {
                "input": {
                    "visible": true,
                    "defaultValue": "What is Vento\n\nVento is an open-source AI agent platform that brings intelligence to the physical world.\nIt lets you monitor and control spaces, devices, and machines, connecting AI, hardware, and humans in one system.\n\nVento runs on Raspberry Pi, Intel NUC, laptops, PCs, VPS, and cloud servers. From there, it coordinates:\n\nHumans: receive live information and trigger actions using real time boards\n\nComputers: talk to other Vento instances, run small scripts, and make API calls\n\nMicrocontrollers (ESP32, Arduino): flash custom firmware, read and write data, tune parameters, orchestrate behavior\n\nIP cameras: ingest images and video to feed vision and detection pipelines into the system\n\nSmartphones: provide portable cameras and sensors, and lightweight UIs for control and feedback\n\nPLCs: integrate industrial I/O into agent decisions\n\nLLMs (local via LM Studio or remote): reasoning, planning, and tool use\n\nResult: systems that perceive, decide, and act in real time.\n\nAgents, Boards, and Cards\n\nIn Vento, each agent is a board composed of cards.\n\nEvery card has:\n\nInputs: values or references it uses, such as numbers, data, or other card outputs\n\nRules: TypeScript logic that computes the result\n\nOutput: the final value that updates the board state\n\nCard types:\n\nValue cards: update automatically, no side effects, represent continuous state\n\nAction cards: run on demand, can perform side effects using context.*, and can call other actions across boards\n\nAll card outputs together form the live state of the agent.\n\nBoard Automation\n\nEach board can include Automation code that reacts to changes in the board and executes actions when conditions are met.\nExample: if a detection score exceeds a threshold and the area is restricted, trigger a siren and notify a user.\nThis enables fully autonomous agents that combine sensors, cameras, PLCs, and LLM decisions in closed loop control.\n\nAuthoring: Natural Language, TypeScript, and Low-code\n\nAll logic in Vento is standard TypeScript.\nYou can write card rules and board automation directly in TS, generate TS from natural language descriptions, or edit flows using low-code diagrams.\nSwitch between natural language, TypeScript, and low-code as needed.\n\nStorage\n\nDefine data schemas and Vento generates a REST API with CRUD, pagination, sorting, and search.\nSchemas appear as Value and Action cards so agents can read, write, and query persistent data directly from their flows.\n\nUsers, Permissions, and Events\n\nVento includes users and groups with granular permissions.\nEvents let agents react to real time changes such as sensor input, camera results, user actions, or external messages.\n\nTasks\n\nTasks are .ts files that run in a Node.js environment on your Vento machine.\nEach task has its own package.json and exposes functions that agents can use as actions.\nUse Tasks for external APIs, business logic, hardware helpers, and AI or vision pipelines.\nYour TypeScript becomes first class agent actions.\n\nAssets Store\n\nDiscover and share automations, extensions, and prebuilt agents.\nAssets can be free or paid. Install with a single click.\nThis creates an open and collaborative ecosystem around Vento.\n\nDevice and Service Integration Summary\n\nMicrocontrollers: flash firmware, stream telemetry, send commands, adjust parameters\n\nIP cameras: connect streams, run vision, feed results into boards\n\nSmartphones: mobile sensors and cameras, lightweight UI, notifications\n\nPLCs: industrial I/O integrated into decisions\n\nLLMs: local or remote models connected to agent logic\n\nPrograms and APIs: scripts, services, and webhooks inside agent actions\n\nVento runs the high level logic on your Raspberry Pi, NUC, laptop, PC, VPS, or cloud server, while microcontrollers and PLCs handle low level signals and actuation.",
                    "type": "string"
                }
            },
            "displayIcon": false,
            "rulesCode": "return params.input;\n",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <YStack f={1} height=\"100%\" ai=\"center\" jc=\"center\" width=\"100%\">\n                {card.icon && card.displayIcon !== false && (\n                    <Icon name={card.icon} size={48} color={card.color}/>\n                )}\n                {card.displayResponse !== false && (\n                    <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n                )}\n            </YStack>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n\n"
        }
    ],
    "autopilot": false,
    "layouts": {
        "lg": [
            {
                "w": 18,
                "h": 15,
                "x": 0,
                "y": 5,
                "i": "action_1760800582118",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 13,
                "x": 18,
                "y": 0,
                "i": "action_1760815369680",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 18,
                "h": 5,
                "x": 0,
                "y": 0,
                "i": "action_176081905123123",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 7,
                "x": 18,
                "y": 13,
                "i": "value_1760819815820",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 15,
                "h": 12,
                "x": 41,
                "y": 0,
                "i": "value_1760875866283",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 19,
                "h": 17,
                "x": 56,
                "y": 0,
                "i": "value_1760884383318",
                "moved": false,
                "static": false,
                "isResizable": true
            }
        ],
        "md": [
            {
                "w": 30,
                "h": 22,
                "x": 0,
                "y": 0,
                "i": "action_1760800582118",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 29,
                "h": 14,
                "x": 30,
                "y": 0,
                "i": "action_1760815369680",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "i": "action_176081905123123",
                "x": 0,
                "y": 33,
                "w": 15,
                "h": 8,
                "isResizable": true
            },
            {
                "i": "value_1760819815820",
                "x": 45,
                "y": 28,
                "w": 8,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "value_1760875866283",
                "x": 15,
                "y": 40,
                "w": 23,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1760884383318",
                "x": 53,
                "y": 60,
                "w": 8,
                "h": 5,
                "isResizable": true
            }
        ],
        "sm": [
            {
                "i": "action_1760800582118",
                "x": 0,
                "y": 0,
                "w": 2,
                "h": 22,
                "isResizable": true
            },
            {
                "i": "action_1760815369680",
                "x": 0,
                "y": 22,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_176081905123123",
                "x": 0,
                "y": 62,
                "w": 1,
                "h": 8,
                "isResizable": true
            },
            {
                "i": "value_1760819815820",
                "x": 1,
                "y": 57,
                "w": 1,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "value_1760875866283",
                "x": 0,
                "y": 70,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1760884383318",
                "x": 1,
                "y": 91,
                "w": 1,
                "h": 5,
                "isResizable": true
            }
        ],
        "xs": [
            {
                "i": "action_1760800582118",
                "x": 0,
                "y": 0,
                "w": 1,
                "h": 22,
                "isResizable": true
            },
            {
                "i": "action_1760815369680",
                "x": 0,
                "y": 22,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_176081905123123",
                "x": 0,
                "y": 63,
                "w": 1,
                "h": 8,
                "isResizable": true
            },
            {
                "i": "value_1760819815820",
                "x": 0,
                "y": 58,
                "w": 1,
                "h": 5,
                "isResizable": true
            },
            {
                "i": "value_1760875866283",
                "x": 0,
                "y": 71,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "value_1760884383318",
                "x": 0,
                "y": 93,
                "w": 1,
                "h": 5,
                "isResizable": true
            }
        ]
    },
    "version": 114,
    "savedAt": 1760968233999,
    "rules": [
        "when user_request changes value, check if there is something in it to execute the agent_core"
    ],
    "settings": {
        "autoplay": true
    }
}