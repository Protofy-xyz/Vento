{
    "name": "{{{name}}}",
    "cards": [
        {
            "key": "action_1760800582118",
            "width": 4,
            "height": 20,
            "icon": "globe",
            "name": "agent_input",
            "description": "A job queue with a list of pending jobs and a current job",
            "type": "action",
            "editorOptions": {},
            "displayResponse": true,
            "params": {
                "item": "",
                "action": "action to perform in the queue: push, pop, clear",
                "response": ""
            },
            "configParams": {
                "item": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                },
                "action": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                },
                "response": {
                    "visible": true,
                    "defaultValue": "",
                    "type": "string"
                }
            },
            "presets": {
                "reply": {
                    "description": "Sends a reply to the current job and makes the next item (if any) the current job. The reply should be specified in the response param",
                    "configParams": {
                        "action": {
                            "visible": false,
                            "defaultValue": "reply"
                        },
                        "item": {
                            "visible": false
                        },
                        "response": {
                            "visible": true
                        }
                    }
                },
                "skip": {
                    "description": "Skips the current job. Do not use unless you know what you are doing.",
                    "configParams": {
                        "action": {
                            "defaultValue": "skip"
                        }
                    }
                },
                "reset": {
                    "description": "resets the queue state to empty and skip curret job",
                    "configParams": {
                        "action": {
                            "defaultValue": "clear"
                        }
                    }
                },
                "remove": {
                    "description": "remove the element with the given index from the job queue",
                    "configParams": {
                        "action": {
                            "defaultValue": "remove"
                        },
                        "item": {
                            "visible": true,
                            "defaultValue": 0,
                            "type": "number"
                        }
                    }
                },
                "push": {
                    "params": {
                        "item": "item to push"
                    },
                    "description": "Adds a new job",
                    "configParams": {
                        "action": {
                            "defaultValue": "push"
                        },
                        "item": {
                            "visible": true,
                            "defaultValue": "",
                            "type": "string"
                        }
                    }
                }
            },
            "enableAgentInputMode": true,
            "tokens": {},
            "displayButton": false,
            "manualAPIResponse": true,
            "rulesCode": "if (params.action == \"reset\") {\n  return { items: [], current: undefined };\n} else if (params.action == \"skip\") {\n  return {\n    items: (Array.isArray(board[name]?.items) ? board[name].items : []).slice(\n      1\n    ),\n    current: board[name].items[0],\n  };\n} else if (params.action == \"remove\") {\n  const queue = Array.isArray(board[name]?.items) ? board[name].items : [];\n  const index = parseInt(params.index, 10);\n  return {\n    items: queue.slice(0, index).concat(queue.slice(index + 1)),\n    current: board[name]?.current,\n  };\n} else if (params.action == \"clear\") {\n  return { items: [], current: board[name].current };\n} else if (params.action == \"reply\") {\n  //reply to current job\n  const job = board[name].current;\n  if (!job) {\n    throw \"Unable to send reply: There is not current job to reply to\";\n  }\n  const res = context.boards.getVar(\"job_\" + job.id, true);\n  if (!res) {\n    throw \"Unable to send reply: Empty res object in current job.\";\n  }\n  res.send(params.response);\n  return {\n    items: (Array.isArray(board[name]?.items) ? board[name].items : []).slice(\n      1\n    ),\n    current: board[name].items[0],\n  };\n} else {\n  const genUID = (l = 16) => {\n    const t = Date.now().toString(36);\n    const r =\n      Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2);\n    let out = \"\";\n    for (let i = 0; i < l; i++)\n      out += (i % 2 ? t : r)[i % (i % 2 ? t.length : r.length)];\n    return out;\n  };\n  const uid = genUID(16);\n  context.boards.setVar(\"job_\" + uid, res);\n  const item = {\n    id: uid,\n    time: new Date().toISOString(),\n    ua: req.get(\"User-Agent\"),\n    params: req.query,\n    path: params.path,\n  };\n\n  if (board[name]?.current) {\n    return {\n      items: (Array.isArray(board[name]?.items)\n        ? board[name].items\n        : []\n      ).concat([item]),\n      current: board[name]?.current,\n    };\n  }\n  return {\n    items: Array.isArray(board[name]?.items) ? board[name].items : [],\n    current: item,\n  };\n}\n",
            "html": "//@card/react\nfunction Widget(props) {\n  return (\n    <ViewList\n      onReply={(item, response) => execute_action(props.name, {action: 'reply', response: response})}\n      enableReply={true}\n      enableManualPop={true}\n      current={props?.value?.current}\n      emptyMessageProps={{\n        fontSize: \"$6\",\n        fontWeight: \"600\"\n      }}\n      emptyDescription={<YStack>\n        <Paragraph color=\"$color10\" mt={\"$2\"} fontSize={\"$4\"}>\n          <a style={{}} target=\"_new\" href={'/api/agents/v1/'+window?.board?.name+'/'+props?.name}>{'Open agent link'}</a>\n        </Paragraph>\n      </YStack>  \n      }\n      // emptyMode=\"wait\"\n      emptyMessage=\"Empty agent job queue\"\n      disableManualPush={true}\n      items={props?.value?.items} \n      onPop={(items) => execute_action(props.name, {action: 'skip'})}\n      onClear={(items) => execute_action(props.name, {action: 'reset'})}\n      onPush={(item) => execute_action(props.name, {action: 'push', item})}\n      onDeleteItem={(item, index) => execute_action(props.name, {action: 'remove', index})} \n    />\n  );\n}\n"
        },
        {
            "key": "action_1760815369680",
            "width": 3,
            "height": 12,
            "icon": "sparkles",
            "type": "action",
            "name": "agent_core",
            "displayResponse": true,
            "params": {
                "prompt": ""
            },
            "configParams": {
                "prompt": {
                    "visible": true,
                    "defaultValue": "You are an assitant, assist the user in the language the user writes the messages. Take the last message of the user in consideration, and the rest of the history only when necessary. Use the information in the board to try to answer the user questions. \n\nThe information in the board has priority over your general knowledge.",
                    "type": "text"
                }
            },
            "description": "Execute actions and answer questions using AI.\n\n   #### Key Features\n  - Run actions based on AI.\n  - Chain/trigger other action cards.\n  - Parameterized execution.\n  - Customize parameters.\n  - Customize the card view (UI/render).",
            "displayIcon": false,
            "displayButton": true,
            "displayButtonIcon": true,
            "color": "var(--color7)",
            "theme": "light",
            "domId": "8eb4a538-e49f-4334-b2e5-a4af3ac87c65",
            "cardState": {},
            "links": [
                {
                    "name": "reply",
                    "type": "post"
                }
            ],
            "rulesCode": "let visibleStates = ['*']\nlet invisibleStates = [name, 'reply', 'agent_input']\n\n// Filtrar estados (board es un objeto)\nconst filteredStates = Object.fromEntries(\n  Object.entries(board).filter(([key, value]) => {\n    if (visibleStates.includes('*')) {\n      return !invisibleStates.includes(key)\n    }\n    return visibleStates.includes(key) && !invisibleStates.includes(key)\n  })\n)\n\nconst response = await context.chatgpt.prompt({\n  message: `\n<instructions>\nYou are an automated agent attending user requests. your mission is to read the user prompt and try to answer by using the by using the information you have.\n</instructions>\n<information>\n${JSON.stringify(filteredStates)}\n</information>\n\nThe user prompt is:\n\n${params.prompt}\n\nAnswer in plain text\n`,\n  conversation: await context.chatgpt.getSystemPrompt({\n    prompt: `You can analyze images provided in the same user turn. \nDo NOT claim you cannot see images.`,\n  }),\n  images: await context.boards.getStatesByType({\n    board: filteredStates,\n    type: \"frame\",\n    key: \"frame\",\n  }),\n  files: await context.boards.getStatesByType({\n    board: filteredStates,\n    type: \"file\",\n    key: \"path\",\n  }),\n});\n\nreturn response\n",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n\n  const content = <YStack f={1}  mt={\"20px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "action_176081905123123",
            "width": 2,
            "height": 7,
            "icon": "rocket",
            "type": "action",
            "name": "reply",
            "displayResponse": false,
            "displayIcon": false,
            "params": {
                "response": "response to send"
            },
            "configParams": {
                "response": {
                    "visible": false,
                    "defaultValue": "board.agent_core",
                    "type": "any"
                }
            },
            "description": "Actions can perform tasks, automate processes, and enhance user interactions. It can also trigger other action-type cards on the board.\n\n  #### Key Features\n  - Run actions from rules.\n  - Chain/trigger other action cards.\n  - Parameterized execution.\n  - Customize parameters.\n  - Customize the card view (UI/render).",
            "autoResponsive": false,
            "rulesCode": "await executeAction({name: \"agent_input\", params: {action:'reply', response: params.response}})\r\nreturn 'ok'",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n\n  const content = <YStack f={1}  mt={\"20px\"} ai=\"center\" jc=\"center\" width=\"100%\">\n      {card.icon && card.displayIcon !== false && (\n          <Icon name={card.icon} size={48} color={card.color}/>\n      )}\n      {card.displayResponse !== false && (\n          <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n      )}\n  </YStack>\n\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n          <ActionCard data={card}>\n            {card.displayButton !== false ? <ParamsForm data={card}>{content}</ParamsForm> : card.displayResponse !== false && content}\n          </ActionCard>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n"
        },
        {
            "key": "value_1760819815820",
            "width": 1,
            "height": 4,
            "icon": "scan-eye",
            "type": "value",
            "name": "user_request",
            "description": "A reusable card that observes value changes on the board.\n\n  #### Key Features\n  - Real time updates.\n  - Customize parameters.\n  - Rule execution on each value change.\n  - Customize the card view (UI/render).",
            "params": {
                "input": "input to observe"
            },
            "configParams": {
                "input": {
                    "visible": true,
                    "defaultValue": "board.agent_input.current",
                    "type": "any"
                }
            },
            "displayIcon": false,
            "rulesCode": "return params.input",
            "html": "//@card/react\n\nfunction Widget(card) {\n  const value = card.value;\n  return (\n      <Tinted>\n        <ProtoThemeProvider forcedTheme={window.TamaguiTheme}>\n            <YStack f={1} height=\"100%\" ai=\"center\" jc=\"center\" width=\"100%\">\n                {card.icon && card.displayIcon !== false && (\n                    <Icon name={card.icon} size={48} color={card.color}/>\n                )}\n                {card.displayResponse !== false && (\n                    <CardValue mode={card.markdownDisplay ? 'markdown' : card.htmlDisplay ? 'html' : 'normal'} value={value ?? \"N/A\"} />\n                )}\n            </YStack>\n        </ProtoThemeProvider>\n      </Tinted>\n  );\n}\n\n"
        }
    ],
    "autopilot": false,
    "layouts": {
        "lg": [
            {
                "w": 18,
                "h": 21,
                "x": 0,
                "y": 5,
                "i": "action_1760800582118",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 19,
                "x": 18,
                "y": 7,
                "i": "action_1760815369680",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 18,
                "h": 5,
                "x": 0,
                "y": 0,
                "i": "action_176081905123123",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 23,
                "h": 7,
                "x": 18,
                "y": 0,
                "i": "value_1760819815820",
                "moved": false,
                "static": false,
                "isResizable": true
            }
        ],
        "md": [
            {
                "w": 30,
                "h": 22,
                "x": 0,
                "y": 0,
                "i": "action_1760800582118",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "w": 29,
                "h": 14,
                "x": 30,
                "y": 0,
                "i": "action_1760815369680",
                "moved": false,
                "static": false,
                "isResizable": true
            },
            {
                "i": "action_176081905123123",
                "x": 0,
                "y": 33,
                "w": 15,
                "h": 8,
                "isResizable": true
            },
            {
                "i": "value_1760819815820",
                "x": 45,
                "y": 28,
                "w": 8,
                "h": 5,
                "isResizable": true
            }
        ],
        "sm": [
            {
                "i": "action_1760800582118",
                "x": 0,
                "y": 0,
                "w": 2,
                "h": 22,
                "isResizable": true
            },
            {
                "i": "action_1760815369680",
                "x": 0,
                "y": 22,
                "w": 2,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_176081905123123",
                "x": 0,
                "y": 62,
                "w": 1,
                "h": 8,
                "isResizable": true
            },
            {
                "i": "value_1760819815820",
                "x": 1,
                "y": 57,
                "w": 1,
                "h": 5,
                "isResizable": true
            }
        ],
        "xs": [
            {
                "i": "action_1760800582118",
                "x": 0,
                "y": 0,
                "w": 1,
                "h": 22,
                "isResizable": true
            },
            {
                "i": "action_1760815369680",
                "x": 0,
                "y": 22,
                "w": 1,
                "h": 14,
                "isResizable": true
            },
            {
                "i": "action_176081905123123",
                "x": 0,
                "y": 63,
                "w": 1,
                "h": 8,
                "isResizable": true
            },
            {
                "i": "value_1760819815820",
                "x": 0,
                "y": 58,
                "w": 1,
                "h": 5,
                "isResizable": true
            }
        ]
    },
    "savedAt": 1761155705920,
    "rules": [
        "when user_request changes value, check if there is something in it to execute the agent_core"
    ],
    "settings": {
        "autoplay": true
    }
}